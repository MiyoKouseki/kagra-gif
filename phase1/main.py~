#
#! coding:utf-8
import nds2
import gwpy
from gwpy.timeseries import TimeSeries
import matplotlib.pyplot as plt
import numpy as np
from scipy.signal import butter, lfilter


def _bandpass(data, lowcut, highcut, fs, order=5):
    nyq = 0.5 * fs
    low = lowcut / nyq
    high = highcut / nyq
    b, a = butter(order, [low, high], btype='band')
    #b, a = butter(order, high, btype='low')    
    y = lfilter(b, a, data)
    return y


def _lowpass(data, lowcut, fs, order=5):
    nyq = 0.5 * fs
    low = lowcut / nyq
    b, a = butter(order, low, btype='low')    
    y = lfilter(b, a, data)
    return y

def rms_mintrend(data,fs,tlen=64):
    ''' rms 
    
    1分(64sec)ごとにRMSを求める関数。    

    Parameter
    ---------
    
    '''
    if np.mod(len(data),tlen) != 0:
        raise ValueError('data size can not devided by {0}'.format(tlen))
    
    d_ = data.reshape(len(data)/tlen,tlen)
    rms_mintrend = np.std(d_,axis=1)
    return rms_mintrend

def histgram(noise,plot=True,fit=True,**kwargs):
    '''
    
    '''
    hist,bins,_ = plt.hist(noise,bins=250,histtype='step',**kwargs)
    return hist,bins


if __name__ == '__main__':
    start = 1209286818-5000
    start = 1211252736+100
    end = start+2**10
    
    #end = start+2**10
    #end = start+2**17
    if True:
        #chname = 'K1:VIS-ETMY_TM_OPLEV_TILT_YAW_OUT16'
        chname = 'K1:PEM-EY1_SEIS_NS_SENSINF_OUT16'
        print 'data taking'    
        ey1 = TimeSeries.fetch(chname,
                            start, end,
                            host='10.68.10.121', port=8088)
        ey =  ey1.value#/1e-6 # um/sec
    if True:
        fname = '{0}_{1}_{2}'.format(start,end,chname[3:])        
        with open(fname,'w') as f:
            np.save(f,ey)
        exit()
    if True:
        chname = 'K1:PEM-EY1_SEIS_NS_SENSINF_OUT16'
        fname = '{0}_{1}_{2}'.format(start,end,chname[3:])
        ylim = [-5e0,5e0]
        ylim = [0,5e0]
        with open(fname,'r') as f:
            ey = np.load(f)/1e-6 # um/sec
    if True:
        chname = 'K1:VIS-ETMY_TM_OPLEV_TILT_YAW_OUT16'
        fname = '{0}_{1}_{2}'.format(start,end,chname[3:])
        ylim = [-200,200]
        ylim = [0,20]        
        with open(fname,'r') as f:
            etmy_tm_yaw = np.load(f)                       
            ey = etmy_tm_yaw
            
    fs = 16
    time = np.arange(len(ey))/fs/60.0/60.0    
    #ey_ = _lowpass(ey,0.03,16,4)    
    ey_lowfreq = _bandpass(ey,0.03,0.1,16,4)
    ey_microseism = _bandpass(ey,0.1,0.3,16,4)
    ey_highfreq = _bandpass(ey,0.3,3,16,4)
    #
    if True:
        ey = rms_mintrend(ey,fs)
        ey_lowfreq = rms_mintrend(ey_lowfreq,fs)
        ey_microseism = rms_mintrend(ey_microseism,fs)
        ey_highfreq = rms_mintrend(ey_highfreq,fs)
        time = np.arange(len(ey))/fs/60.0
        
    print 'calc timeseries'    
    plt.figure(figsize=(10,8))
    plt.ylabel('Velocity [um/sec]')    
    plt.title('Hoge')
    plt.subplot(411)
    plt.ylim(ylim[0],ylim[1])    
    plt.plot(time,ey,label='No filtered')
    plt.ylabel('Velocity [um/sec]')
    plt.legend(loc='upper left')
    
    plt.subplot(412)
    plt.ylim(ylim[0],ylim[1])    
    plt.plot(time,ey_highfreq,label='0.3-3Hz BandPass')
    plt.ylabel('Velocity [um/sec]')
    plt.legend(loc='upper left')
    
    plt.subplot(413)
    plt.ylim(ylim[0],ylim[1])    
    plt.plot(time,ey_microseism,label='0.1-0.3Hz BandPass')
    plt.ylabel('Velocity [um/sec]')
    plt.legend(loc='upper left')

    plt.subplot(414)
    plt.ylim(ylim[0],ylim[1])    
    plt.plot(time,ey_lowfreq,label='0.03-0.1Hz BandPass')    
    plt.ylabel('Velocity [um/sec]')
    plt.legend(loc='upper left')
    
    plt.xlabel('Time [Hours]',fontsize=20)
    plt.tight_layout()
    plt.savefig('timeseries_{0}.png'.format(fname))    
    plt.close()
    print 'calc histgram'
    hist,bins = histgram(ey_lowfreq,cumulative=True)
    hist,bins = histgram(ey_microseism,cumulative=True)
    plt.savefig('histfram_{0}.png'.format(fname))
    plt.close()    
    
